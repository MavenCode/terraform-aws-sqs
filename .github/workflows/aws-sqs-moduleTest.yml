# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the main branch, `terraform apply` will be executed.

name: "AWS-sqs-module-Test"

on:
  push:
    branch:
      - main
      - master
    paths-ignore:
      - "docs/**"
      - "Docs/**"
  pull_request:
    branch:
      - main
      - master
    paths-ignore:
      - "docs/**"
      - "Docs/**"

jobs:
  terraform:
    name: "AWS-sqs-Terraform"
    runs-on: ubuntu-latest
    environment: development

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      # Export aws secret and access key as vars
      - name: Export secre_key, access_key and region
        with:
          export TF_VAR_region: ${{ secrets.MAVEN_AWS_REGION }}
          export TF_VAR_access_key: ${{ secrets.MAVEN_AWS_ACCESS_KEY }}
          export TF_VAR_secret_key: ${{ secrets.MAVEN_AWS_SECRET_KEY }}

      ## Using terraform implementation in workflow above. Can be changed to AWS configuration below.

      #     - name: Configure AWS Credentials
      #       uses: aws-actions/configure-aws-credentials@v1
      #       with:
      #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #         aws-region: us-west-1

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan

        # On push to main, build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
